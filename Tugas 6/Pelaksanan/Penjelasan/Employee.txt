1. Perbbaiki yang salah 
import java.util.*;

public class Employee {
    private String name;
    private double salary;
    private Date hireDay;

    public Employee(String name, double salary, int year, int month, int day) {
        this.name = name;
        this.salary = salary;
        GregorianCalendar calendar = new GregorianCalendar(year, month - 1, day);
        this.hireDay = calendar.getTime();
    }

    public Date getHireDay() {
        return hireDay;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }

    public void raiseSalary(double byPercent) {
        double raise = salary * byPercent / 100;
        salary += raise;
    }
}

Di bagian Employee.java, ada kesalahan penulisan nama atribut hireday. Seharusnya digunakan hireDay (huruf "D" besar).

2. Bagaimana cara konstruktor pada subclass memanggil konstruktor di superclass nya? Apakah hal itu perlu dilakukan? Sertakan alasan anda !
Di Java, konstruktor pada subclass dapat memanggil konstruktor dari superclass menggunakan kata kunci super(). Ini biasanya dilakukan dalam baris pertama konstruktor subclass.

Alasan 
Memastikan inisialisasi yang benar, Mencegah kesalahan, dan Menjaga hubungan "is-a": Konstruktor superclass membantu menjaga hubungan "is-a" antara subclass dan superclass. 

3. Tambahkan constructor pada class Employee dengan parameter String name! amati perubahan apa yang terjadi, jelaskan jawaban anda!
import java.util.*;

public class Employee {
    private String name;
    private double salary;
    private Date hireDay;

    public Employee(String name) {
        this.name = name;
        this.salary = 0;
        this.hireDay = new Date();
    }

    public Employee(String name, double salary, int year, int month, int day) {
        this.name = name;
        this.salary = salary;
        GregorianCalendar calendar = new GregorianCalendar(year, month - 1, day);
        this.hireDay = calendar.getTime();
    }

    public Date getHireDay() {
        return hireDay;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }

    public void raiseSalary(double byPercent) {
        double raise = salary * byPercent / 100;
        salary += raise;
    }
}

4. Pada Class Manager baris ke 5, setelah variable day tambahkan variable bonus! Amati apa yang terjadi dan mengapa demikian?

5. Untuk apa digunakan keyword this pada class manager dan employee? Hapus keyword this dan amati apa yang terjadi?
import java.util.Date;

public class Employee {
    private String name;
    private double salary;
    private Date hireDay;

    public Employee(String name, double salary, int year, int month, int day) {
        name = name;
        salary = salary;
        hireDay = new Date(year, month, day);
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }
}

6. Tambahkan constructor pada class Employee dengan parameter Bertipe data string bernama name yang nantinya bila constructor ini akan dipanggil akan menginisialisasi variable name! Amati perubahannya pada class anak dan jelaskan! Benahi bila terjadi kesalahan!
import java.util.Date;

public class Employee {
    private String name;
    private double salary;
    private Date hireDay;


    public Employee(String name) {
        this.name = name;
        this.salary = 0; 
        this.hireDay = new Date(); 
    }

  
    public Employee(String name, double salary, int year, int month, int day) {
        this.name = name;
        this.salary = salary;
        this.hireDay = new Date(year, month - 1, day);
    }

    public Date getHireDay() {
        return hireDay;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }

    public void raiseSalary(double byPercent) {
        double raise = salary * byPercent / 100;
        salary += raise;
    }
}

7. Pada bab sebelumnya anda telah belajar mengenai konsep encapsulation, jelaskan mengapa pada super class menggunakan modifier protected? Apa yang terjadi jika modifier anda ubah menjadi private atau public? Jelaskan !
Menggunakan pengubah yang dilindungi pada superkelas memungkinkan subkelas mengakses atribut atau metode, namun tetap membatasi akses dari luar paket.
Hal ini membantu menerapkan prinsip enkapsulasi, menjaga privasi kelas sekaligus memberikan fleksibilitas pada subkelas.
 Mengubah pengubah menjadi private membuatnya hanya dapat diakses di dalam kelas, sementara menjadikannya public membuatnya dapat diakses dari mana saja, sehingga mengurangi tingkat enkapsulasi.

8. Ubahlah acces modifier method pada kelas employee menjadi :
a. Private
b. Protected
Amati perubahan apa yang terjadi? Jelaskan jawaban anda dengan detail!

with private
public class Employee {
    private String name;
    private double salary;
    private Date hireDay;

    public Employee(String name) {
        this.name = name;
        this.salary = 0;
        this.hireDay = new Date();
    }

    public Employee(String name, double salary, int year, int month, int day) {
        this.name = name;
        this.salary = salary;
        this.hireDay = new Date(year, month - 1, day);
    }

    private Date getHireDay() {
        return hireDay;
    }

    private String getName() {
        return name;
    }

    private double getSalary() {
        return salary;
    }

    private void raiseSalary(double byPercent) {
        double raise = salary * byPercent / 100;
        salary += raise;
    }
}

with protected
public class Employee {
    private String name;
    private double salary;
    private Date hireDay;

    public Employee(String name) {
        this.name = name;
        this.salary = 0;
        this.hireDay = new Date();
    }

    public Employee(String name, double salary, int year, int month, int day) {
        this.name = name;
        this.salary = salary;
        this.hireDay = new Date(year, month - 1, day);
    }

    protected Date getHireDay() {
        return hireDay;
    }

    protected String getName() {
        return name;
    }

    protected double getSalary() {
        return salary;
    }

    protected void raiseSalary(double byPercent) {
        double raise = salary * byPercent / 100;
        salary += raise;
    }
}



