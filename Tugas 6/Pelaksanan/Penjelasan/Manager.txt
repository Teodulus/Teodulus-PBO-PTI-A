1. perbaiki yang salah
public class Manager extends Employee {
    private double bonus;

    public Manager(String name, double salary, int year, int month, int day) {
        super(name, salary, year, month, day);
        bonus = 0;
    }

    public void setBonus(double bonus) {
        this.bonus = bonus;
    }

    @Override
    public double getSalary() {
        double baseSalary = super.getSalary();
        return baseSalary + bonus;
    }
}

2. Bagaimana cara konstruktor pada subclass memanggil konstruktor di superclass nya? Apakah hal itu perlu dilakukan? Sertakan alasan anda !
Di Java, konstruktor pada subclass dapat memanggil konstruktor dari superclass menggunakan kata kunci super(). Ini biasanya dilakukan dalam baris pertama konstruktor subclass.

Alasan 
Memastikan inisialisasi yang benar, Mencegah kesalahan, dan Menjaga hubungan "is-a": Konstruktor superclass membantu menjaga hubungan "is-a" antara subclass dan superclass. 

3. Tambahkan constructor pada class Employee dengan parameter String name! amati perubahan apa yang terjadi, jelaskan jawaban anda!

4. Pada Class Manager baris ke 5, setelah variable day tambahkan variable bonus! Amati apa yang terjadi dan mengapa demikian?
public class Manager extends Employee {
    private double bonus;

    public Manager(String name, double salary, int year, int month, int day, double bonus) {
        super(name, salary, year, month, day);
        this.bonus = bonus;
    }

    public void setBonus(double bonus) {
        this.bonus = bonus;
    }

    @Override
    public double getSalary() {
        double baseSalary = super.getSalary();
        return baseSalary + bonus;
    }
}


5. Untuk apa digunakan keyword this pada class manager dan employee? Hapus keyword this dan amati apa yang terjadi?
import java.util.Date;

6. Tambahkan constructor pada class Employee dengan parameter Bertipe data string bernama name yang nantinya bila constructor ini akan dipanggil akan menginisialisasi variable name! Amati perubahannya pada class anak dan jelaskan! Benahi bila terjadi kesalahan!
public class Manager extends Employee {
    private double bonus;

    public Manager(String name, double salary, int year, int month, int day, double bonus) {
        super(name, salary, year, month, day); // Memanggil constructor superclass dengan parameter name, salary, year, month, dan day
        this.bonus = bonus;
    }

    public void setBonus(double bonus) {
        this.bonus = bonus;
    }

    @Override
    public double getSalary() {
        double baseSalary = super.getSalary();
        return baseSalary + bonus;
    }
}

7. Pada bab sebelumnya anda telah belajar mengenai konsep encapsulation, jelaskan mengapa pada super class menggunakan modifier protected? Apa yang terjadi jika modifier anda ubah menjadi private atau public? Jelaskan !
Menggunakan pengubah yang dilindungi pada superkelas memungkinkan subkelas mengakses atribut atau metode, namun tetap membatasi akses dari luar paket.
Hal ini membantu menerapkan prinsip enkapsulasi, menjaga privasi kelas sekaligus memberikan fleksibilitas pada subkelas.
Mengubah pengubah menjadi private membuatnya hanya dapat diakses di dalam kelas, sementara menjadikannya public membuatnya dapat diakses dari mana saja, sehingga mengurangi tingkat enkapsulasi.

8. Ubahlah acces modifier method pada kelas employee menjadi :
a. Private
b. Protected
Amati perubahan apa yang terjadi? Jelaskan jawaban anda dengan detail!


