public class Test {
    public static void main(String[] args) {
        Student s1 = new Student();
        s1.setName("Enkapsulasi");
        s1.setMark(90);
        System.out.println("s1Name is " + s1.getName());
        System.out.println("s1Mark is " + s1.getMark());
        System.out.println("name dan mark " + s1.getName() + " " + s1.getMark());
    }
}

//2.Jika pada baris 6 s1.setName diubah menjadi s1.getName apa yang terjadi? jelaskan!
public class Test {
    public static void main(String[] args) {
        Student s1 = new Student();
        s1.getName("Enkapsulasi");
        s1.setMark(90);
        System.out.println("s1Name is " + s1.getName());
        System.out.println("s1Mark is " + s1.getMark());

    }
}


//3. Setelah diperbaiki, ubahlah hak akses pada baris 4 (pada class Student) menjadi private apa yang terjadi jika class Test dijalankan? Jelaskan!
public class Test {
    public static void main(String[] args) {
        Student s1 = new Student();
        s1.setName("Enkapsulasi");
        s1.setMark(90);
        System.out.println("s1Name is " + s1.getName());
        System.out.println("s1Mark is " + s1.getMark());
        System.out.println("name dan mark " + s1.getName() + " " + s1.getMark());
    }
}

//4. Jika kedua kelas diatas terdapat dalam package yang sama apakah konsep enkapsulasi tetap berfungsi? jelaskan!
Konsep enkapsulasi  berfungsi meskipun kedua kelas berada dalam paket yang sama. Enkapsulasi adalah konsep  pemrograman berorientasi objek yang mengelola akses ke data di dalam  objek.
Dengan menerapkan enkapsulasi, Kita dapat memastikan bahwa data hanya dapat diakses dan dimodifikasi melalui metode yang ditentukan dan tidak langsung dari luar kelas.
Pengubah akses  seperti private, protected, dan public tetap berlaku meskipun kelas berada dalam paket yang sama. Dalam hal ini, jika variabel nama dan tag dideklarasikan  private pada kelas Student, maka variabel tersebut hanya dapat diakses  langsung dari  kelas tersebut.
Kelas-kelas lain dalam paket yang sama tidak dapat mengakses variabel-variabel ini secara langsung  dan harus menggunakan metode akses yang disediakan (pengambil dan penyetel).

