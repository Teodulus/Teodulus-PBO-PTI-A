//1. Method apakah yang menjadi accessor (getter) ?
public class TestVehicle1 {
    public static void main(String[] args) {
        System.out.println("Creating a vehicle with a 10,000 kg maximum load.");
        Vehicle1 vehicle = new Vehicle1(10000);
        System.out.println("Add box #1 (500kg): " + vehicle.addBox(500));
        System.out.println("Add box #2 (250kg): " + vehicle.addBox(250));
        System.out.println("Add box #3 (5000kg): " + vehicle.addBox(5000));
        System.out.println("Add box #4 (4000kg): " + vehicle.addBox(4000));
        System.out.println("Add box #5 (300kg): " + vehicle.addBox(300));
        System.out.println("Vehicle load is " + vehicle.getLoad() + "kg");  
          }
}


//2. Tambahkan source code berikut dibawah baris ke 6 pada class TestVehicle1.
System.out.println("Add load(100kg) : " + (vehicle.load=500));
Jalankan program, apakah output dari program tersebut?
Kembalikan program seperti semula.

Dalam praktiknya, variabel instance seperti load biasanya dideklarasikan sebagai private agar tidak dapat diakses secara langsung dari luar kelas tersebut. Sebaliknya, akses ke variabel tersebut disediakan melalui metode akses (getter) yang sesuai. Ini disebut enkapsulasi, yang merupakan konsep dasar dalam pemrograman berorientasi objek.

public class TestVehicle1 {
    public static void main(String[] args) {
        System.out.println("Creating a vehicle with a 10,000 kg maximum load.");
        Vehicle1 vehicle = new Vehicle1(10000);
        System.out.println("Add box #1 (500kg): " + vehicle.addBox(500));
        System.out.println("Add box #2 (250kg): " + vehicle.addBox(250));
        System.out.println("Add box #3 (5000kg): " + vehicle.addBox(5000));
        System.out.println("Add box #4 (4000kg): " + vehicle.addBox(4000));
        System.out.println("Add box #5 (300kg): " + vehicle.addBox(300));
        System.out.println("Vehicle load is " + vehicle.getLoad() + "kg");
        
        System.out.println("Add load(100kg) : " + (vehicle.load = 500));
    }
}


kode kembali ke semula
public class TestVehicle1 {
    public static void main(String[] args) {
        System.out.println("Creating a vehicle with a 10,000 kg maximum load.");
        Vehicle1 vehicle = new Vehicle1(10000);
        System.out.println("Add box #1 (500kg): " + vehicle.addBox(500));
        System.out.println("Add box #2 (250kg): " + vehicle.addBox(250));
        System.out.println("Add box #3 (5000kg): " + vehicle.addBox(5000));
        System.out.println("Add box #4 (4000kg): " + vehicle.addBox(4000));
        System.out.println("Add box #5 (300kg): " + vehicle.addBox(300));
        System.out.println("Vehicle load is " + vehicle.getLoad() + "kg");
     }
}

//3. Ubahlah tipe data pada atribut load dan maxload pada class Vehicle1 menjadi public.
Jalankan program, apakah output dari program tersebut?
a. Tambahkan source kode berikut dibawah baris ke 6 pada class TestVehicle1.
System.out.println("Add load(100kg) : " + (vehicle.load=500));
Jalankan program, apakah output dari program tersebut?
Kembalikan program seperti semula.
public class TestVehicle1 {
    public static void main(String[] args) {
        System.out.println("Creating a vehicle with a 10,000 kg maximum load.");
        Vehicle1 vehicle = new Vehicle1(10000);
        System.out.println("Add box #1 (500kg): " + vehicle.addBox(500));
        System.out.println("Add box #2 (250kg): " + vehicle.addBox(250));
        System.out.println("Add box #3 (5000kg): " + vehicle.addBox(5000));
        System.out.println("Add box #4 (4000kg): " + vehicle.addBox(4000));
        System.out.println("Add box #5 (300kg): " + vehicle.addBox(300));
        System.out.println("Vehicle load is " + vehicle.getLoad() + "kg");

        System.out.println("Add load(100kg) : " + (vehicle.load=500));

    }
}

Output dari program akan sama dengan sebelumnya, dan tidak akan terjadi peringatan karena load sekarang dapat diakses langsung dari luar kelas.

b. Tambahkan source kode berikut dibawah baris ke 12 pada class TestVehicle1.
System.out.println("Add load(100kg) : " + (vehicle.load=500));
Jalankan program, apakah output dari program tersebut?
Kembalikan program seperti semula
public class TestVehicle1 {
    public static void main(String[] args) {
        System.out.println("Creating a vehicle with a 10,000 kg maximum load.");
        Vehicle1 vehicle = new Vehicle1(10000);
        System.out.println("Add box #1 (500kg): " + vehicle.addBox(500));
        System.out.println("Add box #2 (250kg): " + vehicle.addBox(250));
        System.out.println("Add box #3 (5000kg): " + vehicle.addBox(5000));
        System.out.println("Add box #4 (4000kg): " + vehicle.addBox(4000));
        System.out.println("Add box #5 (300kg): " + vehicle.addBox(300));
        System.out.println("Vehicle load is " + vehicle.getLoad() + "kg");

        System.out.println("Add load(100kg) : " + (vehicle.load=500));
System.out.println("Add load(100kg) : " + (vehicle.load=500));


    }
}


//4. Ulangi instruksi pada nomer 4 dengan mengubah tipe data pada atribut load dan maxload
pada class Vehicle1 menjadi protected.
public class TestVehicle1 {
    public static void main(String[] args) {
        System.out.println("Creating a vehicle with a 10,000 kg maximum load.");
        Vehicle1 vehicle = new Vehicle1(10000);
        System.out.println("Add box #1 (500kg): " + vehicle.addBox(500));
        System.out.println("Add box #2 (250kg): " + vehicle.addBox(250));
        System.out.println("Add box #3 (5000kg): " + vehicle.addBox(5000));
        System.out.println("Add box #4 (4000kg): " + vehicle.addBox(4000));
        System.out.println("Add box #5 (300kg): " + vehicle.addBox(300));
        System.out.println("Vehicle load is " + vehicle.getLoad() + "kg");

    }
}

//5. Ulangi instruksi pada nomer 4 dengan mengubah tipe data pada atribut load dan maxload
pada class Vehicle1 menjadi default.
public class TestVehicle1 {
    public static void main(String[] args) {
        System.out.println("Creating a vehicle with a 10,000 kg maximum load.");
        Vehicle1 vehicle = new Vehicle1(10000);
        System.out.println("Add box #1 (500kg): " + vehicle.addBox(500));
        System.out.println("Add box #2 (250kg): " + vehicle.addBox(250));
        System.out.println("Add box #3 (5000kg): " + vehicle.addBox(5000));
        System.out.println("Add box #4 (4000kg): " + vehicle.addBox(4000));
        System.out.println("Add box #5 (300kg): " + vehicle.addBox(300));
        System.out.println("Vehicle load is " + vehicle.getLoad() + "kg");

    }
}


